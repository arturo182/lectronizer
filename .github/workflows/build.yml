
name: Build and zip

env:
    QT_VERSION: '6.2.2' # MacOS and Windows
    QT_MAC_ARCH: 'clang_64'
    QT_WIN_ARCH: 'win64_mingw'
    QT_WIN_TOOLS: 'tools_mingw90,qt.tools.win64_mingw900'

on: [push, pull_request]

jobs:
    build:
        name: Building for ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Install Windows Qt
              if: startsWith(matrix.os, 'windows')
              uses: jurplel/install-qt-action@v3
              with:
                version: ${{ env.QT_VERSION }}
                arch: ${{ env.QT_WIN_ARCH }}
                tools: ${{ env.QT_WIN_TOOLS }}
                cache: true
                modules: qtcharts

            - name: Install MacOS Qt
              if: startsWith(matrix.os, 'macos')
              uses: jurplel/install-qt-action@v3
              with:
                version: ${{ env.QT_VERSION }}
                arch: ${{ env.QT_MAC_ARCH }}
                cache: true
                modules: qtcharts

            - name: Install Ubuntu packages
              if: startsWith(matrix.os, 'ubuntu')
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential qtbase5-dev libqt5charts5-dev qt5-qmake qtchooser

            - name: Clone repo
              uses: actions/checkout@v2
              with:
                ref: ${{ github.event.client_payload.branch }}

            - name: Get short sha1
              id: short_sha1
              run: echo "::set-output name=value::$(git rev-parse --short HEAD)"

            - name: Build and copy on Windows
              if: startsWith(matrix.os, 'windows')
              run: |
                qmake.exe VER_SHA1=${{ steps.short_sha1.outputs.value }} QMAKE_CXX="${{ env.IQTA_TOOLS }}\mingw1120_64\bin\g++.exe" lectronizer.pro
                mingw32-make.exe -j
                mkdir output
                copy release/lectronizer.exe output
                windeployqt.exe output/lectronizer.exe --no-translations --no-system-d3d-compiler
                copy "${{ env.IQTA_TOOLS }}\mingw1120_64\opt\bin\libwinpthread-1.dll" output
                copy "${{ env.Qt6_DIR }}\bin\libgcc_s_seh-1.dll" output
                copy "${{ env.Qt6_DIR }}\bin\libstdc++-6.dll" output
                Invoke-WebRequest -Uri https://github.com/IndySockets/OpenSSL-Binaries/raw/refs/heads/master/openssl-1.0.2u-x64_86-win64.zip -OutFile openssl.zip
                Expand-Archive -Path openssl.zip -DestinationPath openssl
                copy "openssl\libeay32.dll" output
                copy "openssl\ssleay32.dll" output

            - name: Build and copy on MacOS
              if: startsWith(matrix.os, 'macos')
              run: |
                qmake VER_SHA1=${{ steps.short_sha1.outputs.value }} lectronizer.pro
                make -j
                mkdir output
                macdeployqt lectronizer.app
                chmod +x lectronizer.app/Contents/MacOS/lectronizer
                xattr -d -r com.apple.quarantine lectronizer.app
                cp -R lectronizer.app output

            - name: Build and copy on Ubuntu
              if: startsWith(matrix.os, 'ubuntu')
              run: |
                qmake VER_SHA1=${{ steps.short_sha1.outputs.value }} lectronizer.pro
                make -j
                mkdir output
                cp lectronizer output

            - name: Split os name (remove "-latest")
              uses: rishabhgupta/split-by@v1
              id: split
              with:
                string: ${{ matrix.os }}
                split-by: '-'

            - name: Upload package artifact
              uses: actions/upload-artifact@v4
              with:
                path: output
                name: lectronizer-${{ steps.short_sha1.outputs.value }}-${{ steps.split.outputs._0 }}
